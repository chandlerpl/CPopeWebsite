@page "/blog/newpost"
@page "/blog/editpost/{PostId}"
@layout BlogLayout
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using System.Net.Http

@attribute [Authorize(Policy = "RequireAdmin")]

<BlogPostHeader Heading="CPope Blog" SubHeading=@(IsEdit ? "Edit Post" : "AddPost") />

<div class="container">
    <div class="row">
        <div class="col-md-auto">
            <div class="editor">
                @if (IsEdit)
                {
                <input @bind=@ExistingBlogPost.Title placeholder="Title" class="form-control" />
                <InputFile OnChange="HandleSelection" />
                <p>@status</p>
                <button class="btn btn-primary float-right" @onclick="@DeletePost">Delete</button>
                <button class="btn btn-primary float-right" @onclick="@UpdatePost">Update</button>
                <label class="float-right">Publish</label>
                <input type="checkbox" class="float-right" @bind=@ExistingBlogPost.Publish />
                <textarea @bind=@ExistingBlogPost.Post placeholder="Write your post (Supports Markdown)" rows="20" class="form-control"></textarea>
                }
                else
                {
                <input @bind=@Title placeholder="Title" class="form-control" />
                <InputFile OnChange="HandleSelection" />
                <p>@status</p>
                <button class="btn btn-primary float-right" @onclick="@SavePost">Post</button>
                <label class="float-right">Publish</label>
                <input type="checkbox" class="float-right" @bind=@Publish />
                <textarea @bind=@Post placeholder="Write your post (Supports Markdown)" rows="20" class="form-control"></textarea>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string PostId { get; set; }

    protected string Post { get; set; }
    protected string Title { get; set; }
    protected bool Publish { get; set; }

    protected int CharacterCount { get; set; }
    protected BlogPost ExistingBlogPost { get; set; } = new BlogPost();
    protected bool IsEdit => string.IsNullOrEmpty(PostId) ? false : true;

    string status;

    async Task HandleSelection(IFileListEntry[] files)
    {
        status = "Please wait...";

        var file = files.FirstOrDefault();
        if (file != null)
        {
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);

            var content = new MultipartFormDataContent {
                { new ByteArrayContent(ms.GetBuffer()), "\"" + Urls.UploadImage + "\"", file.Name }
            };
            await Http.PostAsync(Urls.UploadImage, content);
            status = "Uploaded! Available at: ../images/" + file.Name;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(PostId))
        {
            await LoadPost();
        }
    }

    public async Task SavePost()
    {
        var newPost = new BlogPost()
        {
            Title = Title,
            Author = "Chandler Pope-Lewis",
            Post = Post,
            Posted = DateTime.UtcNow,
            Publish = Publish
        };

        var savedPost = await Http.PostJsonAsync<BlogPost>(Urls.PostBlogPost, newPost);
        NavigationManager.NavigateTo($"blog/blogpost/{savedPost.Id}");
    }

    public async Task UpdatePost()
    {
        await Http.PutJsonAsync(Urls.UpdateBlogPost.Replace("{id}", PostId), ExistingBlogPost);

        NavigationManager.NavigateTo($"blog/blogpost/{ExistingBlogPost.Id}");
    }

    private async Task LoadPost()
    {
        ExistingBlogPost = await Http.GetJsonAsync<BlogPost>(Urls.BlogPost.Replace("{id}", PostId));
        CharacterCount = ExistingBlogPost.Post.Length;
    }

    public async Task DeletePost()
    {
        await Http.DeleteAsync(Urls.DeleteBlogPost.Replace("{id}", ExistingBlogPost.Id.ToString()));

        NavigationManager.NavigateTo("/blog/");
    }
}
